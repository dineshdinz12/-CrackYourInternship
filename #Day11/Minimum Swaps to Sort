Minimum Swaps to Sort

#include <stdio.h>
#include <stdlib.h>

int minSwaps(int* nums, int numsSize) {
    int* sortedIndices = (int*)malloc(numsSize * sizeof(int));
    for (int i = 0; i < numsSize; i++) {
        sortedIndices[i] = nums[i];
    }

    qsort(sortedIndices, numsSize, sizeof(int), (int (*)(const void *, const void *))strcmp);

    int* indexMap = (int*)malloc(numsSize * sizeof(int));
    for (int i = 0; i < numsSize; i++) {
        indexMap[sortedIndices[i]] = i;
    }

    int* visited = (int*)calloc(numsSize, sizeof(int));
    int swaps = 0;
    for (int i = 0; i < numsSize; i++) {
        if (visited[i] || indexMap[nums[i]] == i) {
            continue;
        }
        int cycleSize = 0;
        int x = i;
        while (!visited[x]) {
            visited[x] = 1;
            x = indexMap[nums[x]];
            cycleSize++;
        }
        if (cycleSize > 1) {
            swaps += (cycleSize - 1);
        }}

    free(sortedIndices);
    free(indexMap);
    free(visited);

    return swaps;
}

int main() {
    int nums1[] = {2, 8, 5, 4};
    int numsSize1 = sizeof(nums1) / sizeof(nums1[0]);
    printf("Minimum swaps for nums1: %d\n", minSwaps(nums1, numsSize1));  // Output: 1

    int nums2[] = {10, 19, 6, 3, 5};
    int numsSize2 = sizeof(nums2) / sizeof(nums2[0]);
    printf("Minimum swaps for nums2: %d\n", minSwaps(nums2, numsSize2));  // Output: 2

    return 0;
}
